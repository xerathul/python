#연습문제  https://cafe.daum.net/flowlife/SBU0/10'

#1) step1 : array 관련 문제
#정규분포를 따르는 난수를 이용하여 5행 4열 구조의 다차원 배열 객체를 생성하고, 각 행 단위로 합계, 최댓값을 구하시오.

import numpy as np
a =  np.random.randn(20)
print(a)
aa= a.reshape(5,4)
print(aa)
#행단위 합계
sum=np.sum(aa, axis=1)

#행단위 최댓값
max=np.max(aa, axis=1)

for i in range(0,5):
    print('%d행 합계:'%i,sum[i])
    print('%d행 최대값:'%i,max[i])
print('-------------------------')
# 2) step2 : indexing 관련문제
# 문2-1) 6행 6열의 다차원 zero 행렬 객체를 생성한 후 다음과 같이 indexing 하시오.
a = np.zeros((6,6))
print(a)
#조건1> 36개의 셀에 1~36까지 정수 채우기
b= np.arange(1,37).reshape(6,6)
print(b)
# 조건2> 2번째 행 전체 원소 출력하기 
#출력 결과 : [ 7.   8.   9.  10.  11.  12.]
c= b.astype(np.float64)
print(c[1])
#조건3> 5번째 열 전체 원소 출력하기
# 출력결과 : [ 5. 11. 17. 23. 29. 35.]
print(c[:,4])
#조건4> 15~29 까지 아래 처럼 출력하기
#출력결과 : 
#[[15.  16.  17.]
#[21.  22.  23]
#[27.  28.  29.]]
d=c[2:5,2:5]
print(d)
print('--------------------')
# 문2-2) 6행 4열의 다차원 zero 행렬 객체를 생성한 후 아래와 같이 처리하시오.
'''
     조건1> 20~100 사이의 난수 정수를 6개 발생시켜 각 행의 시작열에 난수 정수를 저장하고, 두 번째 열부터는 1씩 증가시켜 원소 저장하기
     조건2> 첫 번째 행에 1000, 마지막 행에 6000으로 요소값 수정하기

<<출력 예시>>

1. zero 다차원 배열 객체
  [[ 0.  0.  0.  0.]
        ...
   [ 0.  0.  0.  0.]]
'''
a = np.zeros((6,4))
print(a)
'''
2. 난수 정수 발생
random.randint(s, e, n)
'''
b = np.random.randint(20,100,6)
print(b)
'''
3. zero 다차원 배열에 난수 정수 초기화 결과. 두 번째 열부터는 1씩 증가시켜 원소 저장하기
[[  90.   91.   92.   93.]
 [  40.   41.   42.   43.]
 [ 100.  101.  102.  103.]
 [  22.   23.   24.   25.]
 [  52.   53.   54.   55.]
 [  71.   72.   73.   74.]]
'''
for i in range(0,4):
    a[:,i]= b
    b+=1
print(a)

'''
4. 첫 번째 행에 1000, 마지막 행에 6000으로 수정

 [[ 1000.  1000.  1000.  1000.]
  [   40.    41.    42.    43.]
  [  100.   101.   102.   103.]
  [   22.    23.    24.    25.]
  [   52.    53.    54.    55.]
  [ 6000.  6000.  6000.  6000.]]
  '''
a[0]=1000
a[5]=6000
print(a)
print('-----------------------------')
'''
3) step3 : unifunc 관련문제
  표준정규분포를 따르는 난수를 이용하여 4행 5열 구조의 다차원 배열을 생성한 후
  아래와 같이 넘파이 내장함수(유니버설 함수)를 이용하여 기술통계량을 구하시오.
  배열 요소의 누적합을 출력하시오.

<<출력 예시>>

~ 4행 5열 다차원 배열 ~
[[ 0.56886895  2.27871787 -0.20665035 -1.67593523 -0.54286047]
           ...
 [ 0.05807754  0.63466469 -0.90317403  0.11848534  1.26334224]]

~ 출력 결과 ~
평균 :
합계 :
표준편차 :
분산 :
최댓값 :
최솟값 :
1사분위 수 :           percentile()
2사분위 수 :
3사분위 수 :
요소값 누적합 :      cumsum()
'''
a= np.random.rand(20).reshape(4,5)
print(a)
print('평균 :', np.mean(a))
print('합계 :', np.sum(a))
print('표준편차 :', np.std(a))
print('분산 :', np.var(a))
print('최댓값 :', np.max(a))
print('최솟값 :', np.min(a))
print('1사분위 수 :', np.percentile(a,25))
print('2사분위 수 :', np.percentile(a,50))
print('3사분위 수 :', np.percentile(a,75))
print('요소값 누적합 :', np.cumsum(a))

